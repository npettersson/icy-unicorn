/*
 * This file is generated by jOOQ.
 */
package se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.DefaultSchema;
import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.Keys;
import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables.records.BusLineRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusLine extends TableImpl<BusLineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BUS_LINE</code>
     */
    public static final BusLine BUS_LINE = new BusLine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusLineRecord> getRecordType() {
        return BusLineRecord.class;
    }

    /**
     * The column <code>BUS_LINE.ID</code>.
     */
    public final TableField<BusLineRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BUS_LINE.DESIGNATION</code>.
     */
    public final TableField<BusLineRecord, String> DESIGNATION = createField(DSL.name("DESIGNATION"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>BUS_LINE.EXISTS_FROM</code>.
     */
    public final TableField<BusLineRecord, LocalDate> EXISTS_FROM = createField(DSL.name("EXISTS_FROM"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private BusLine(Name alias, Table<BusLineRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusLine(Name alias, Table<BusLineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BUS_LINE</code> table reference
     */
    public BusLine(String alias) {
        this(DSL.name(alias), BUS_LINE);
    }

    /**
     * Create an aliased <code>BUS_LINE</code> table reference
     */
    public BusLine(Name alias) {
        this(alias, BUS_LINE);
    }

    /**
     * Create a <code>BUS_LINE</code> table reference
     */
    public BusLine() {
        this(DSL.name("BUS_LINE"), null);
    }

    public <O extends Record> BusLine(Table<O> child, ForeignKey<O, BusLineRecord> key) {
        super(child, key, BUS_LINE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BusLineRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<UniqueKey<BusLineRecord>> getKeys() {
        return Arrays.<UniqueKey<BusLineRecord>>asList(Keys.CONSTRAINT_E);
    }

    @Override
    public BusLine as(String alias) {
        return new BusLine(DSL.name(alias), this);
    }

    @Override
    public BusLine as(Name alias) {
        return new BusLine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusLine rename(String name) {
        return new BusLine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusLine rename(Name name) {
        return new BusLine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
