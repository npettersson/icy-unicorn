/*
 * This file is generated by jOOQ.
 */
package se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.DefaultSchema;
import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.Indexes;
import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.Keys;
import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables.records.BusStopRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusStop extends TableImpl<BusStopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BUS_STOP</code>
     */
    public static final BusStop BUS_STOP = new BusStop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusStopRecord> getRecordType() {
        return BusStopRecord.class;
    }

    /**
     * The column <code>BUS_STOP.ID</code>.
     */
    public final TableField<BusStopRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.STOP_AREA_ID</code>.
     */
    public final TableField<BusStopRecord, Integer> STOP_AREA_ID = createField(DSL.name("STOP_AREA_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.NAME</code>.
     */
    public final TableField<BusStopRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.NORTH_COORD</code>.
     */
    public final TableField<BusStopRecord, String> NORTH_COORD = createField(DSL.name("NORTH_COORD"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.EAST_COORD</code>.
     */
    public final TableField<BusStopRecord, String> EAST_COORD = createField(DSL.name("EAST_COORD"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.ZONE</code>.
     */
    public final TableField<BusStopRecord, String> ZONE = createField(DSL.name("ZONE"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>BUS_STOP.EXISTS_FROM</code>.
     */
    public final TableField<BusStopRecord, LocalDate> EXISTS_FROM = createField(DSL.name("EXISTS_FROM"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private BusStop(Name alias, Table<BusStopRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusStop(Name alias, Table<BusStopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BUS_STOP</code> table reference
     */
    public BusStop(String alias) {
        this(DSL.name(alias), BUS_STOP);
    }

    /**
     * Create an aliased <code>BUS_STOP</code> table reference
     */
    public BusStop(Name alias) {
        this(alias, BUS_STOP);
    }

    /**
     * Create a <code>BUS_STOP</code> table reference
     */
    public BusStop() {
        this(DSL.name("BUS_STOP"), null);
    }

    public <O extends Record> BusStop(Table<O> child, ForeignKey<O, BusStopRecord> key) {
        super(child, key, BUS_STOP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_BUS_STOP_NAME);
    }

    @Override
    public UniqueKey<BusStopRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_EB;
    }

    @Override
    public List<UniqueKey<BusStopRecord>> getKeys() {
        return Arrays.<UniqueKey<BusStopRecord>>asList(Keys.CONSTRAINT_EB);
    }

    @Override
    public BusStop as(String alias) {
        return new BusStop(DSL.name(alias), this);
    }

    @Override
    public BusStop as(Name alias) {
        return new BusStop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusStop rename(String name) {
        return new BusStop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusStop rename(Name name) {
        return new BusStop(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, String, LocalDate> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
