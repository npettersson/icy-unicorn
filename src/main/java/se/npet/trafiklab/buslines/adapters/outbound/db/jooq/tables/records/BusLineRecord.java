/*
 * This file is generated by jOOQ.
 */
package se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables.records;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import se.npet.trafiklab.buslines.adapters.outbound.db.jooq.tables.BusLine;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusLineRecord extends UpdatableRecordImpl<BusLineRecord> implements Record3<Integer, String, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>BUS_LINE.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>BUS_LINE.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>BUS_LINE.DESIGNATION</code>.
     */
    public void setDesignation(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>BUS_LINE.DESIGNATION</code>.
     */
    public String getDesignation() {
        return (String) get(1);
    }

    /**
     * Setter for <code>BUS_LINE.EXISTS_FROM</code>.
     */
    public void setExistsFrom(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>BUS_LINE.EXISTS_FROM</code>.
     */
    public LocalDate getExistsFrom() {
        return (LocalDate) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, LocalDate> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BusLine.BUS_LINE.ID;
    }

    @Override
    public Field<String> field2() {
        return BusLine.BUS_LINE.DESIGNATION;
    }

    @Override
    public Field<LocalDate> field3() {
        return BusLine.BUS_LINE.EXISTS_FROM;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDesignation();
    }

    @Override
    public LocalDate component3() {
        return getExistsFrom();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDesignation();
    }

    @Override
    public LocalDate value3() {
        return getExistsFrom();
    }

    @Override
    public BusLineRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BusLineRecord value2(String value) {
        setDesignation(value);
        return this;
    }

    @Override
    public BusLineRecord value3(LocalDate value) {
        setExistsFrom(value);
        return this;
    }

    @Override
    public BusLineRecord values(Integer value1, String value2, LocalDate value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BusLineRecord
     */
    public BusLineRecord() {
        super(BusLine.BUS_LINE);
    }

    /**
     * Create a detached, initialised BusLineRecord
     */
    public BusLineRecord(Integer id, String designation, LocalDate existsFrom) {
        super(BusLine.BUS_LINE);

        setId(id);
        setDesignation(designation);
        setExistsFrom(existsFrom);
    }
}
